# 3.Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, cell):
        self.cell = cell

    def __add__(self, other):
        print(f'сложение клетки с количеством ячеек:{self.cell} и клетки с количеством ячеек:{other.cell}')
        return Cell(self.cell+other.cell)

    def __sub__(self, other):
        if self.cell >= other.cell:
            print(f'вычитание клетки с количеством ячеек:{self.cell} и клетки с количеством ячеек:{other.cell}')
            return Cell(self.cell - other.cell)
        else:
            raise Exception('разность ячеек меньше нуля')

    def __mul__(self, other):
        print(f'умножение клетки с количеством ячеек:{self.cell} и клетки с количеством ячеек:{other.cell}')
        return Cell(self.cell*other.cell)

    def __truediv__(self, other):
        print(f'деление клетки с количеством ячеек:{self.cell} и клетки с количеством ячеек:{other.cell}')
        return Cell(self.cell//other.cell)

    def make_order(self, n_in_row):
        out = ''
        cur = self.cell
        if n_in_row == 0:
            raise Exception('некорректное значение')
        while cur > n_in_row:
            out += '*'*n_in_row + '\n'
            cur -= n_in_row
        out += '*'*cur+'\n'
        return out

    def __str__(self):
        return 'количество ячеек в клетке - '+str(self.cell)


a = Cell(14)
b = Cell(12)
c = Cell(15)
print(a+b)
print(a-b)
#print(b-c)
print(b*a)
print(a/b)
print(b/c)
print()
print(a.make_order(5))
print(b.make_order(3))
print(c.make_order(4))
